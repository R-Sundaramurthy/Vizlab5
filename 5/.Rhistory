for (i in 4:8){
ButtonsY[[i-3]]= list(method = "restyle",
args = list( "y", list(olive2[[i]])),
label = colnames(olive2)[i])
}
ButtonsZ=list()
for (i in 4:8){
ButtonsZ[[i-3]]= list(method = "restyle",
args = list( "z", list(olive2[[i]])),
label = colnames(olive2)[i])
}
plot3d <- plot_ly(shared2,x=~oleic, y=~linolenic, z=~palmitic)%>%
add_markers() %>%
layout(xaxis=list(title=""), yaxis=list(title="", zaxis =list(titles="")),
title = "3d Scatter plot",
updatemenus = list(
list(x=0.2, y=0.6, buttons = ButtonsX, showactive = TRUE ),
list(x =0.2, y=0.8, buttons = ButtonsY, showactive = TRUE ),
list(x =0.2, y= 1.0, buttons = ButtonsZ, showactive = TRUE )
),
annotations = list(
list(text = "X var", x= 0, y = 0.6, showarrow = FALSE),
list(text = "Y var", x = 0, y = 0.8, showarrow = FALSE),
list(text = "Z var", x = 0, y = 1, showarrow = FALSE)
)
)
plot3d
# bar graph of region
region_chart <- shared2 %>%
plot_ly( x =~ Region) %>%
add_histogram() %>%
layout(barmode = "overlay")
region_chart
# bar graph of region
region_bar <- shared2 %>%
plot_ly( x =~ Region) %>%
add_histogram() %>%
layout(barmode = "overlay")
# brushing
bscols(subplot(plot1, region_bar) %>%
plot1%>%highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%
hide_legend())
plot1 <- plot_ly(shared1, x = ~variable, y =~value) %>%
add_lines(line = list(width = 0.3)) %>%
add_markers(marker = list(size = 0.3),
text = ~.ID, hoverinfo = "text")
# brushing
bscols(subplot(plot1, region_bar) %>%
plot1%>%highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%
hide_legend())
plot1 <- plot_ly(shared1, x = ~variable, y =~value) %>%
add_lines(line = list(width = 0.3)) %>%
add_markers(marker = list(size = 0.3),
text = ~.ID, hoverinfo = "text")
plot1
rm(plot1)
# bar graph of region
region_bar <- shared2 %>%
plot_ly( x =~ Region) %>%
add_histogram() %>%
layout(barmode = "overlay")
# brushing
bscols(subplot(par_plot, region_bar) %>%
par_plot%>%highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%
hide_legend())
# brushing
bscols(par_plot%>%highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%
hide_legend())
# brushing
bscols(widths = c(2, NA), subplot(par_plot, region_bar) %>%
par_plot%>%highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%
hide_legend())
# brushing
par_plot2 <- htmltools::tagList(par_plot%>%
highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%
hide_legend(),
# brushing
par_plot2 <- htmltools::tagList(par_plot%>%
highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%
hide_legend()
# brushing
par_plot2 <- htmltools::tagList(par_plot%>%
highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%
hide_legend())
par_plot <- plot_ly(shared1, x = ~variable, y =~value) %>%
add_lines(line = list(width = 0.3)) %>%
add_markers(marker = list(size = 0.3),
text = ~.ID, hoverinfo = "text")
par_plot
# brushing
par_plot2 <- htmltools::tagList(par_plot%>%
highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%
hide_legend())
# brushing
par_plot2 <- htmltools::tagList(par_plot%>%
highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%
hide_legend())
par_plot2
# brushing
par_plot2 <- htmltools::tagList(par_plot%>%
highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%
hide_legend())
subplot(par_plot2, region_bar)
# brushing
par_plot2 <- htmltools::tagList(par_plot%>%
highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%
hide_legend())
subplot(par_plot, region_bar)
subplot(par_plot, region_bar) %>%
highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%
hide_legend())
subplot(par_plot, region_bar) %>%
highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%
hide_legend()
# variable selection
ButtonsX=list()
for (i in 4:8){
ButtonsX[[i-3]]= list(method = "restyle",
args = list( "x", list(olive2[[i]])),
label = colnames(olive2)[i])
}
ButtonsY=list()
for (i in 4:8){
ButtonsY[[i-3]]= list(method = "restyle",
args = list( "y", list(olive2[[i]])),
label = colnames(olive2)[i])
}
ButtonsZ=list()
for (i in 4:8){
ButtonsZ[[i-3]]= list(method = "restyle",
args = list( "z", list(olive2[[i]])),
label = colnames(olive2)[i])
}
plot3d <- plot_ly(shared2,x=~oleic, y=~linolenic, z=~palmitic)%>%
add_markers() %>%
layout(xaxis=list(title=""), yaxis=list(title="", zaxis =list(titles="")),
title = "3d Scatter plot",
updatemenus = list(
list(x=0.2, y=0.6, buttons = ButtonsX, showactive = TRUE ),
list(x =0.2, y=0.8, buttons = ButtonsY, showactive = TRUE ),
list(x =0.2, y= 1.0, buttons = ButtonsZ, showactive = TRUE )
),
annotations = list(
list(text = "X var", x= 0, y = 0.6, showarrow = FALSE),
list(text = "Y var", x = 0, y = 0.8, showarrow = FALSE),
list(text = "Z var", x = 0, y = 1, showarrow = FALSE)
)
)
plot3d
library(ggplot2)
library(plotly)
library(tm)
library(wordcloud)
library(RColorBrewer)
library(crosstalk)
library(GGally)
library(htmltools)
df1<-read.table("OneTwo.txt",header=F, sep='\n') #Read file
df2<-read.table("Five.txt",header=F, sep='\n')
# word cloud for OneTwo.txt
df1$doc_id=1:nrow(df1)
colnames(df1)[1]<-"text"
#Here we interpret each line in the document as separate document
mycorpus <- Corpus(DataframeSource(df1)) #Creating corpus (collection of text data)
mycorpus <- tm_map(mycorpus, removePunctuation)
mycorpus <- tm_map(mycorpus, function(x) removeWords(x, stopwords("english")))
tdm <- TermDocumentMatrix(mycorpus) #Creating term-document matrix
m <- as.matrix(tdm)
#here we merge all rows
v <- sort(rowSums(m),decreasing=TRUE) #Sum up the frequencies of each word
d <- data.frame(word = names(v),freq=v) #Create one column=names, second=frequences
pal <- brewer.pal(8,"Dark2")
pal <- pal[-(1:2)] #Create palette of colors
wordcloud(d$word,d$freq, scale=c(8,.3),min.freq=2,max.words=100, random.order=F, rot.per=.15, colors=pal, vfont=c("sans serif","plain"))
# wordcloud for Five.txt
df2$doc_id=1:nrow(df2)
colnames(df2)[1]<-"text"
#Here we interpret each line in the document as separate document
mycorpus <- Corpus(DataframeSource(df2)) #Creating corpus (collection of text data)
mycorpus <- tm_map(mycorpus, removePunctuation)
mycorpus <- tm_map(mycorpus, function(x) removeWords(x, stopwords("english")))
tdm <- TermDocumentMatrix(mycorpus) #Creating term-document matrix
m <- as.matrix(tdm)
#here we merge all rows
v <- sort(rowSums(m),decreasing=TRUE) #Sum up the frequencies of each word
d <- data.frame(word = names(v),freq=v) #Create one column=names, second=frequences
pal <- brewer.pal(5,"Dark2")
pal <- pal[-(1:2)] #Create palette of colors
wordcloud(d$word,d$freq, scale=c(8,.3),min.freq=2,max.words=100, random.order=F, rot.per=.15, colors=pal, vfont=c("sans serif","plain"))
# Olive data
olive <- read.csv("olive.csv", sep = ",", header = TRUE)
# convert region to factor
olive$Region <-as.factor(olive$Region)
olive_shared <- SharedData$new(olive)
eic_lin_scatt <- olive_shared %>%
plot_ly(x = ~linoleic, y =~ eicosenoic) #%>%
#add_markers(list(size = 6, color = "orange"))
bar_chart <- olive_shared %>%
plot_ly( x =~ Region) %>%
add_histogram() %>%
layout(barmode = "overlay")
# linking the scatterplot and bar chart
subplot(eic_lin_scatt, bar_chart) %>%
highlight(on = "plotly_select", dynamic = T, persistent = T, opacityDim = I(1)) %>%
hide_legend()
bscols(widths=c(2, NA),filter_slider("S", "Stearic", olive_shared, ~stearic)
,subplot(eic_lin_scatt, bar_chart)%>%
highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%hide_legend())
ara_lin_scatt <- olive_shared %>%
plot_ly(x = ~linolenic, y =~ arachidic)
subplot(eic_lin_scatt, ara_lin_scatt) %>%
highlight(on = "plotly_select", dynamic = T, persistent = T, opacityDim = I(1)) %>%
hide_legend()
# the eight acids (column 4:11)
parcord <- ggparcoord(olive, columns = c(3:10))
# plotly_data returns data associated with a plotly visualization.
p_data <- plotly_data(ggplotly(parcord)) %>% group_by(.ID)
# data for crosstalk
shared1<-SharedData$new(p_data, ~.ID, group = "Olive")
par_plot <- plot_ly(shared1, x = ~variable, y =~value) %>%
add_lines(line = list(width = 0.3)) %>%
add_markers(marker = list(size = 0.3),
text = ~.ID, hoverinfo = "text")
# subset
olive2 <- olive
# create an id
olive2$.ID <- 1:nrow(olive)
# shared data 2
shared2 <- SharedData$new(olive2, ~.ID, group = "olive")
# bar graph of region
region_bar <- shared2 %>%
plot_ly( x =~ Region) %>%
add_histogram() %>%
layout(barmode = "overlay")
bscols(par_plot%>%highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%
hide_legend(),
region_bar%>%highlight(on="plotly_click", dynamic=T, persistent = T)%>%hide_legend())
# variable selection
ButtonsX=list()
for (i in 4:8){
ButtonsX[[i-3]]= list(method = "restyle",
args = list( "x", list(olive2[[i]])),
label = colnames(olive2)[i])
}
ButtonsY=list()
for (i in 4:8){
ButtonsY[[i-3]]= list(method = "restyle",
args = list( "y", list(olive2[[i]])),
label = colnames(olive2)[i])
}
ButtonsZ=list()
for (i in 4:8){
ButtonsZ[[i-3]]= list(method = "restyle",
args = list( "z", list(olive2[[i]])),
label = colnames(olive2)[i])
}
plot3d <- plot_ly(shared2,x=~oleic, y=~linolenic, z=~palmitic)%>%
add_markers() %>%
layout(xaxis=list(title=""), yaxis=list(title="", zaxis =list(titles="")),
title = "3d Scatter plot",
updatemenus = list(
list(x=0.07, y=0.6, buttons = ButtonsX, showactive = TRUE, method = "update" ),
list(x =0.07, y=0.7, buttons = ButtonsY, showactive = TRUE, method = "update" ),
list(x =0.07, y= .8, buttons = ButtonsZ, showactive = TRUE, method = "update" )
),
annotations = list(
list(text = "X", x= 0, y = 0.6, showarrow = FALSE),
list(text = "Y", x = 0, y = 0.7, showarrow = FALSE),
list(text = "Z", x = 0, y = .8, showarrow = FALSE)
)
)
plot3d
eic_lin_scatt <- olive_shared %>%
plot_ly(x = ~linoleic, y =~ eicosenoic) %>%
layout(
title = "Eicosenoic vs Linoleic",
xaxis = "Linoleic",
yaxis = "Eicosenoic"
)
#add_markers(list(size = 6, color = "orange"))
bar_chart <- olive_shared %>%
plot_ly( x =~ Region) %>%
add_histogram() %>%
layout(barmode = "overlay",
title = "Regions",
xaxis = "regions",
yaxis = "count"
)
# linking the scatterplot and bar chart
#subplot(eic_lin_scatt, bar_chart) %>%
# highlight(on = "plotly_select", dynamic = T, persistent = T, opacityDim = I(1)) %>%
#  hide_legend()
bscols(widths=c(2, NA),filter_slider("S", "Stearic", olive_shared, ~stearic)
,subplot(eic_lin_scatt, bar_chart)%>%
highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%hide_legend())
bar_chart <- olive_shared %>%
plot_ly( x =~ Region) %>%
add_histogram() %>%
layout(barmode = "overlay",
title = "Regions",
xaxis = "regions",
yaxis = "count"
)
bar_chart
library(ggplot2)
library(plotly)
library(tm)
library(wordcloud)
library(RColorBrewer)
library(crosstalk)
library(GGally)
library(htmltools)
df1<-read.table("OneTwo.txt",header=F, sep='\n') #Read file
df2<-read.table("Five.txt",header=F, sep='\n')
# word cloud for OneTwo.txt
df1$doc_id=1:nrow(df1)
colnames(df1)[1]<-"text"
#Here we interpret each line in the document as separate document
mycorpus <- Corpus(DataframeSource(df1)) #Creating corpus (collection of text data)
mycorpus <- tm_map(mycorpus, removePunctuation)
mycorpus <- tm_map(mycorpus, function(x) removeWords(x, stopwords("english")))
tdm <- TermDocumentMatrix(mycorpus) #Creating term-document matrix
m <- as.matrix(tdm)
#here we merge all rows
v <- sort(rowSums(m),decreasing=TRUE) #Sum up the frequencies of each word
d <- data.frame(word = names(v),freq=v) #Create one column=names, second=frequences
pal <- brewer.pal(8,"Dark2")
pal <- pal[-(1:2)] #Create palette of colors
wordcloud(d$word,d$freq, scale=c(8,.3),min.freq=2,max.words=100, random.order=F, rot.per=.15, colors=pal, vfont=c("sans serif","plain"))
# wordcloud for Five.txt
df2$doc_id=1:nrow(df2)
colnames(df2)[1]<-"text"
#Here we interpret each line in the document as separate document
mycorpus <- Corpus(DataframeSource(df2)) #Creating corpus (collection of text data)
mycorpus <- tm_map(mycorpus, removePunctuation)
mycorpus <- tm_map(mycorpus, function(x) removeWords(x, stopwords("english")))
tdm <- TermDocumentMatrix(mycorpus) #Creating term-document matrix
m <- as.matrix(tdm)
#here we merge all rows
v <- sort(rowSums(m),decreasing=TRUE) #Sum up the frequencies of each word
d <- data.frame(word = names(v),freq=v) #Create one column=names, second=frequences
pal <- brewer.pal(5,"Dark2")
pal <- pal[-(1:2)] #Create palette of colors
wordcloud(d$word,d$freq, scale=c(8,.3),min.freq=2,max.words=100, random.order=F, rot.per=.15, colors=pal, vfont=c("sans serif","plain"))
# Olive data
olive <- read.csv("olive.csv", sep = ",", header = TRUE)
# convert region to factor
olive$Region <-as.factor(olive$Region)
olive_shared <- SharedData$new(olive)
eic_lin_scatt <- olive_shared %>%
plot_ly(x = ~linoleic, y =~ eicosenoic) %>%
layout(
title = "Eicosenoic vs Linoleic",
xaxis = "Linoleic",
yaxis = "Eicosenoic"
)
#add_markers(list(size = 6, color = "orange"))
bar_chart <- olive_shared %>%
plot_ly( x =~ Region) %>%
add_histogram() %>%
layout(barmode = "overlay",
title = "Regions",
xaxis = "regions",
yaxis = "count"
)
bar_chart
bar_chart <- olive_shared %>%
plot_ly( x =~ Region) %>%
add_histogram() %>%
layout(barmode = "overlay",
list(
title = "Regions",
xaxis = "regions",
yaxis = "count"
)
)
bar_chart
bar_chart <- olive_shared %>%
plot_ly( x =~ Region) %>%
add_histogram() %>%
layout(barmode = "overlay",
title <- list(
title = "Regions"
),
x <- list(
title = "Regions"
),
y <- list(
title = "Count"
)
)
bar_chart
bar_chart <- olive_shared %>%
plot_ly( x =~ Region) %>%
add_histogram() %>%
layout(barmode = "overlay",
title <- list(
title = "Regions"
),
xaxis <- list(
title = "Regions"
),
yaxis <- list(
title = "Count"
)
)
bar_chart
bar_chart <- olive_shared %>%
plot_ly( x =~ Region) %>%
add_histogram() %>%
layout(barmode = "overlay",
title = "Regions",
xaxis <- list(
title = "Regions"
),
yaxis <- list(
title = "Count"
)
)
bar_chart
bar_chart <- olive_shared %>%
plot_ly( x =~ Region) %>%
add_histogram() %>%
layout(barmode = "overlay",
title = "Regions",
scene = list(
xaxis <- list(
title = "Regions"
),
yaxis <- list(
title = "Count"
)
)
)
bar_chart
bar_chart <- olive_shared %>%
plot_ly( x =~ Region) %>%
add_histogram() %>%
layout(barmode = "overlay",
title = "Regions",
xaxis <- list(
title = "Regions"
),
yaxis <- list(
title = "Count"
)
)
bar_chart
eic_lin_scatt <- olive_shared %>%
plot_ly(x = ~linoleic, y =~ eicosenoic) %>%
layout(
title = "Eicosenoic vs Linoleic",
xaxis = list(title = "Linoleic"),
yaxis = list(title = "Eicosenoic")
)
#add_markers(list(size = 6, color = "orange"))
eic_lin_scatt <- olive_shared %>%
plot_ly(x = ~linoleic, y =~ eicosenoic) %>%
layout(
title = "Eicosenoic vs Linoleic",
xaxis = list(title = "Linoleic"),
yaxis = list(title = "Eicosenoic")
)
#add_markers(list(size = 6, color = "orange"))
bar_chart <- olive_shared %>%
plot_ly( x =~ Region) %>%
add_histogram() %>%
layout(barmode = "overlay",
title = "Regions",
xaxis = list(
title = "Regions"
),
yaxis = list(
title = "Count"
)
)
# linking the scatterplot and bar chart
#subplot(eic_lin_scatt, bar_chart) %>%
# highlight(on = "plotly_select", dynamic = T, persistent = T, opacityDim = I(1)) %>%
#  hide_legend()
bscols(widths=c(2, NA),filter_slider("S", "Stearic", olive_shared, ~stearic)
,subplot(eic_lin_scatt, bar_chart)%>%
highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%hide_legend())
# linking the scatterplot and bar chart
#subplot(eic_lin_scatt, bar_chart) %>%
# highlight(on = "plotly_select", dynamic = T, persistent = T, opacityDim = I(1)) %>%
#  hide_legend()
bscols(widths=c(2, NA),filter_slider("S", "Stearic", olive_shared, ~stearic)
,subplot(eic_lin_scatt, bar_chart)%>%
highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%hide_legend())
eic_lin_scatt <- olive_shared %>%
plot_ly(x = ~linoleic, y =~ eicosenoic) #%>%
#add_markers(list(size = 6, color = "orange"))
bar_chart <- olive_shared %>%
plot_ly( x =~ Region) %>%
add_histogram() %>%
layout(barmode = "overlay"
)
# linking the scatterplot and bar chart
#subplot(eic_lin_scatt, bar_chart) %>%
# highlight(on = "plotly_select", dynamic = T, persistent = T, opacityDim = I(1)) %>%
#  hide_legend()
bscols(widths=c(2, NA),filter_slider("S", "Stearic", olive_shared, ~stearic)
,subplot(eic_lin_scatt, bar_chart)%>%
highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%hide_legend())
# linking the scatterplot and bar chart
#subplot(eic_lin_scatt, bar_chart) %>%
# highlight(on = "plotly_select", dynamic = T, persistent = T, opacityDim = I(1)) %>%
#  hide_legend()
bscols(widths=c(2, NA),filter_slider("S", "Stearic", olive_shared, ~stearic)
,subplot(eic_lin_scatt, bar_chart)%>%
highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%hide_legend())
